#from flask import Flask, request
from twilio.twiml.messaging_response import MessagingResponse

app = Flask(__name__)

# Vamos armazenar o estado da conversa em memória para o exemplo simples (em produção use DB)
user_states = {}
user_data = {}

@app.route("/whatsapp", methods=['POST'])
def whatsapp_bot():
    sender = request.form.get('From')  # número do usuário
    msg = request.form.get('Body').strip().lower()
    resp = MessagingResponse()

    state = user_states.get(sender, "START")

    if state == "START":
        if "denunciar" in msg:
            user_states[sender] = "ASK_TYPE"
            resp.message(
                "Obrigado por usar nosso serviço de denúncias.\nPor favor, envie o tipo da denúncia:\n"
                "1️⃣ Spam\n2️⃣ Conteúdo impróprio\n3️⃣ Fraude\n4️⃣ Outro"
            )
        else:
            resp.message("Olá! Para fazer uma denúncia, envie uma mensagem contendo a palavra 'denunciar'.")
    
    elif state == "ASK_TYPE":
        types = {"1": "Spam", "2": "Conteúdo impróprio", "3": "Fraude", "4": "Outro"}
        if msg in types:
            user_data[sender] = {"type": types[msg]}
            user_states[sender] = "ASK_DETAILS"
            resp.message(f"Você escolheu '{types[msg]}'. Por favor, descreva a denúncia com detalhes.")
        else:
            resp.message("Opção inválida. Por favor, envie um número de 1 a 4 correspondente ao tipo de denúncia.")
    
    elif state == "ASK_DETAILS":
        user_data[sender]["details"] = msg
        # Aqui você pode salvar user_data[sender] no banco ou enviar para equipe
        resp.message("Denúncia recebida com sucesso! Nossa equipe irá analisar e entrar em contato se necessário. Obrigado.")
        # Resetar estado para permitir nova denúncia depois
        user_states[sender] = "START"
        user_data.pop(sender, None)

    else:
        user_states[sender] = "START"
        resp.message("Olá! Para fazer uma denúncia, envie uma mensagem contendo a palavra 'denunciar'.")

    return str(resp)

if __name__ == "__main__":
    app.run(debug=True)
 This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  release-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Build release distributions
        run: |
          # NOTE: put your own distribution build steps here.
          python -m pip install build
          python -m build

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - release-build
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    # Dedicated environments with protections for publishing are strongly recommended.
    # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
    environment:
      name: pypi
      # OPTIONAL: uncomment and update to include your PyPI project URL in the deployment status:
      # url: https://pypi.org/p/YOURPROJECT
      #
      # ALTERNATIVE: if your GitHub Release name is the PyPI project version string
      # ALTERNATIVE: exactly, uncomment the following line instead:
      # url: https://pypi.org/project/YOURPROJECT/${{ github.event.release.name }}

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
